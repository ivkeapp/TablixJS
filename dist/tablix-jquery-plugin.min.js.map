{"version":3,"file":"tablix-jquery-plugin.min.js","sources":["../src/jquery/plugin-standalone.js"],"sourcesContent":["/**\r\n * TablixJS jQuery Plugin (Standalone)\r\n * This file provides jQuery integration for TablixJS when TablixJS is already loaded\r\n * \r\n * Usage:\r\n * 1. Load TablixJS core first\r\n * 2. Load jQuery\r\n * 3. Load this plugin file\r\n * \r\n * The plugin will automatically register itself if both TablixJS and jQuery are available.\r\n */\r\n\r\n(function() {\r\n  'use strict';\r\n  \r\n  // Check if we're in a browser environment\r\n  const isWindow = typeof window !== 'undefined';\r\n  const isGlobal = typeof global !== 'undefined';\r\n  \r\n  // Get jQuery from various sources\r\n  const $ = (isWindow && (window.jQuery || window.$)) || \r\n           (isGlobal && (global.jQuery || global.$));\r\n  \r\n  if (!$) {\r\n    // jQuery not available - this is expected in some scenarios\r\n    return;\r\n  }\r\n\r\n  // Get TablixJS from various sources\r\n  let TablixJS = null;\r\n  \r\n  if (isWindow) {\r\n    TablixJS = window.TablixJS || window.Table;\r\n  } else if (isGlobal) {\r\n    TablixJS = global.TablixJS || global.Table;\r\n  }\r\n  \r\n  // If TablixJS is not available globally, try to require it (Node.js/CommonJS)\r\n  if (!TablixJS && typeof require === 'function') {\r\n    try {\r\n      TablixJS = require('tablixjs');\r\n      // Could be default export or named export\r\n      TablixJS = TablixJS.default || TablixJS.Table || TablixJS;\r\n    } catch (e) {\r\n      // Could not require TablixJS\r\n    }\r\n  }\r\n  \r\n  if (!TablixJS) {\r\n    console.warn('TablixJS jQuery plugin: TablixJS is not available. Please load TablixJS before this plugin.');\r\n    return;\r\n  }\r\n  \r\n  // Ensure we have the Table constructor\r\n  const Table = TablixJS.Table || TablixJS.default || TablixJS;\r\n  \r\n  if (typeof Table !== 'function') {\r\n    console.error('TablixJS jQuery plugin: TablixJS Table constructor is not available.');\r\n    return;\r\n  }\r\n\r\n  // Plugin name\r\n  const PLUGIN_NAME = 'tablixJS';\r\n  \r\n  // Data key for storing TablixJS instances\r\n  const DATA_KEY = 'tablixjs-instance';\r\n  \r\n  /**\r\n   * TablixJS jQuery Plugin\r\n   * @param {Object|String} options - Configuration options or method name\r\n   * @param {...*} args - Additional arguments for method calls\r\n   * @returns {jQuery} - jQuery chainable object\r\n   */\r\n  $.fn[PLUGIN_NAME] = function(options, ...args) {\r\n    return this.each(function() {\r\n      const $element = $(this);\r\n      const instance = $element.data(DATA_KEY);\r\n      \r\n      // If options is a string, treat it as a method call\r\n      if (typeof options === 'string') {\r\n        handleMethodCall($element, instance, options, args);\r\n      } else {\r\n        // Initialize new instance\r\n        handleInitialization($element, instance, options);\r\n      }\r\n    });\r\n  };\r\n  \r\n  /**\r\n   * Handle method calls on existing instances\r\n   * @param {jQuery} $element - jQuery element\r\n   * @param {Table} instance - TablixJS instance\r\n   * @param {String} methodName - Method to call\r\n   * @param {Array} args - Method arguments\r\n   */\r\n  function handleMethodCall($element, instance, methodName, args) {\r\n    if (!instance) {\r\n      console.error(`TablixJS: Cannot call method \"${methodName}\" on uninitialized element.`);\r\n      return;\r\n    }\r\n    \r\n    switch (methodName) {\r\n      case 'reload':\r\n      case 'loadData':\r\n        if (args.length > 0) {\r\n          instance.loadData(args[0]);\r\n        } else {\r\n          console.error('TablixJS: reload/loadData method requires data parameter.');\r\n        }\r\n        break;\r\n        \r\n      case 'destroy':\r\n        instance.destroy();\r\n        $element.removeData(DATA_KEY);\r\n        break;\r\n        \r\n      case 'refresh':\r\n      case 'refreshTable':\r\n        instance.refreshTable();\r\n        break;\r\n        \r\n      case 'getData':\r\n        return instance.getData();\r\n        \r\n      case 'getOriginalData':\r\n        return instance.getOriginalData();\r\n        \r\n      case 'getSelectedData':\r\n        return instance.getSelectedData();\r\n        \r\n      case 'getSelectedIds':\r\n        return instance.getSelectedIds();\r\n        \r\n      case 'selectRows':\r\n        if (args.length > 0) {\r\n          instance.selectRows(args[0]);\r\n        }\r\n        break;\r\n        \r\n      case 'deselectRows':\r\n        if (args.length > 0) {\r\n          instance.deselectRows(args[0]);\r\n        }\r\n        break;\r\n        \r\n      case 'clearSelection':\r\n        instance.clearSelection();\r\n        break;\r\n        \r\n      case 'selectAllRows':\r\n        return instance.selectAllRows();\r\n        \r\n      case 'filter':\r\n        if (args.length > 0) {\r\n          instance.filter(args[0]);\r\n        }\r\n        break;\r\n        \r\n      case 'applyFilter':\r\n        if (args.length >= 2) {\r\n          instance.applyFilter(args[0], args[1]);\r\n        }\r\n        break;\r\n        \r\n      case 'clearFilter':\r\n        if (args.length > 0) {\r\n          instance.clearFilter(args[0]);\r\n        }\r\n        break;\r\n        \r\n      case 'clearAllFilters':\r\n        instance.clearAllFilters();\r\n        break;\r\n        \r\n      case 'sort':\r\n        if (args.length > 0) {\r\n          instance.sort(args[0], args[1]);\r\n        }\r\n        break;\r\n        \r\n      case 'toggleSort':\r\n        if (args.length > 0) {\r\n          instance.toggleSort(args[0]);\r\n        }\r\n        break;\r\n        \r\n      case 'clearSorting':\r\n        instance.clearSorting();\r\n        break;\r\n        \r\n      case 'setSearchTerm':\r\n        if (args.length > 0) {\r\n          instance.setSearchTerm(args[0]);\r\n        }\r\n        break;\r\n        \r\n      case 'clearSearch':\r\n        instance.clearSearch();\r\n        break;\r\n        \r\n      case 'nextPage':\r\n        instance.nextPage();\r\n        break;\r\n        \r\n      case 'prevPage':\r\n        instance.prevPage();\r\n        break;\r\n        \r\n      case 'firstPage':\r\n        instance.firstPage();\r\n        break;\r\n        \r\n      case 'lastPage':\r\n        instance.lastPage();\r\n        break;\r\n        \r\n      case 'goToPage':\r\n        if (args.length > 0) {\r\n          instance.goToPage(args[0]);\r\n        }\r\n        break;\r\n        \r\n      case 'changePageSize':\r\n        if (args.length > 0) {\r\n          instance.changePageSize(args[0]);\r\n        }\r\n        break;\r\n        \r\n      case 'getPaginationInfo':\r\n        return instance.getPaginationInfo();\r\n        \r\n      case 'setLanguage':\r\n        if (args.length > 0) {\r\n          instance.setLanguage(args[0]);\r\n        }\r\n        break;\r\n        \r\n      case 'getCurrentLanguage':\r\n        return instance.getCurrentLanguage();\r\n        \r\n      case 'getAvailableLanguages':\r\n        return instance.getAvailableLanguages();\r\n        \r\n      case 'setOptions':\r\n        if (args.length > 0) {\r\n          instance.setOptions(args[0]);\r\n        }\r\n        break;\r\n        \r\n      case 'getOptions':\r\n        return instance.getOptions();\r\n        \r\n      case 'on':\r\n        if (args.length >= 2) {\r\n          instance.on(args[0], args[1]);\r\n        }\r\n        break;\r\n        \r\n      case 'off':\r\n        if (args.length >= 2) {\r\n          instance.off(args[0], args[1]);\r\n        }\r\n        break;\r\n        \r\n      case 'trigger':\r\n        if (args.length >= 1) {\r\n          instance.trigger(args[0], args[1]);\r\n        }\r\n        break;\r\n        \r\n      case 'getInstance':\r\n        return instance;\r\n        \r\n      default:\r\n        console.error(`TablixJS: Unknown method \"${methodName}\".`);\r\n        break;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Handle initialization of new TablixJS instances\r\n   * @param {jQuery} $element - jQuery element\r\n   * @param {Table} existingInstance - Existing TablixJS instance (if any)\r\n   * @param {Object} options - Configuration options\r\n   */\r\n  function handleInitialization($element, existingInstance, options = {}) {\r\n    // If instance already exists, destroy it first\r\n    if (existingInstance) {\r\n      console.warn('TablixJS: Reinitializing existing table instance.');\r\n      existingInstance.destroy();\r\n    }\r\n    \r\n    // Normalize options structure\r\n    const normalizedOptions = normalizeOptions(options);\r\n    \r\n    try {\r\n      // Create new TablixJS instance\r\n      const instance = new Table($element[0], normalizedOptions);\r\n      \r\n      // Store instance reference\r\n      $element.data(DATA_KEY, instance);\r\n      \r\n      // Set up jQuery-specific event forwarding\r\n      setupJQueryEventForwarding($element, instance);\r\n      \r\n    } catch (error) {\r\n      console.error('TablixJS: Failed to initialize table:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Normalize options from jQuery-style to TablixJS-style\r\n   * @param {Object} options - jQuery plugin options\r\n   * @returns {Object} - Normalized TablixJS options\r\n   */\r\n  function normalizeOptions(options = {}) {\r\n    // Handle different option structures for backward compatibility\r\n    const normalized = { ...options };\r\n    \r\n    // If data is provided at root level, keep it there\r\n    if (options.data) {\r\n      normalized.data = options.data;\r\n    }\r\n    \r\n    // If columns is provided at root level, keep it there\r\n    if (options.columns) {\r\n      normalized.columns = options.columns;\r\n    }\r\n    \r\n    // If there's an 'options' property, merge it with root level\r\n    if (options.options && typeof options.options === 'object') {\r\n      Object.assign(normalized, options.options);\r\n      delete normalized.options; // Remove the nested options property\r\n    }\r\n    \r\n    return normalized;\r\n  }\r\n  \r\n  /**\r\n   * Set up event forwarding from TablixJS to jQuery events\r\n   * @param {jQuery} $element - jQuery element\r\n   * @param {Table} instance - TablixJS instance\r\n   */\r\n  function setupJQueryEventForwarding($element, instance) {\r\n    // Map of TablixJS events to jQuery events\r\n    const eventMap = {\r\n      'afterLoad': 'tablixjs:afterLoad',\r\n      'beforeLoad': 'tablixjs:beforeLoad',\r\n      'loadError': 'tablixjs:loadError',\r\n      'afterFilter': 'tablixjs:afterFilter',\r\n      'afterSort': 'tablixjs:afterSort',\r\n      'afterPageChange': 'tablixjs:afterPageChange',\r\n      'afterSearch': 'tablixjs:afterSearch',\r\n      'selectionChanged': 'tablixjs:selectionChanged',\r\n      'selectAll': 'tablixjs:selectAll',\r\n      'rowSelected': 'tablixjs:rowSelected',\r\n      'rowDeselected': 'tablixjs:rowDeselected'\r\n    };\r\n    \r\n    // Forward TablixJS events to jQuery events\r\n    Object.keys(eventMap).forEach(tablixEvent => {\r\n      const jqueryEvent = eventMap[tablixEvent];\r\n      instance.on(tablixEvent, (data) => {\r\n        $element.trigger(jqueryEvent, [data, instance]);\r\n      });\r\n    });\r\n  }\r\n  \r\n  // Static methods and properties\r\n  $.fn[PLUGIN_NAME].version = '0.1.1';\r\n  $.fn[PLUGIN_NAME].defaults = {};\r\n  \r\n  /**\r\n   * Get TablixJS instance from jQuery element\r\n   * @param {jQuery|String} element - jQuery element or selector\r\n   * @returns {Table|null} - TablixJS instance or null\r\n   */\r\n  $.fn[PLUGIN_NAME].getInstance = function(element) {\r\n    const $el = $(element);\r\n    return $el.length > 0 ? $el.data(DATA_KEY) : null;\r\n  };\r\n  \r\n  /**\r\n   * Check if element has TablixJS initialized\r\n   * @param {jQuery|String} element - jQuery element or selector\r\n   * @returns {Boolean} - True if initialized\r\n   */\r\n  $.fn[PLUGIN_NAME].isInitialized = function(element) {\r\n    const $el = $(element);\r\n    return $el.length > 0 && !!$el.data(DATA_KEY);\r\n  };\r\n  \r\n  /**\r\n   * Destroy all TablixJS instances on the page\r\n   */\r\n  $.fn[PLUGIN_NAME].destroyAll = function() {\r\n    $(`[data-${DATA_KEY}]`).each(function() {\r\n      const $el = $(this);\r\n      const instance = $el.data(DATA_KEY);\r\n      if (instance) {\r\n        instance.destroy();\r\n        $el.removeData(DATA_KEY);\r\n      }\r\n    });\r\n  };\r\n  \r\n  // Log successful registration\r\n  if (console && console.log) {\r\n    console.log('TablixJS jQuery plugin registered successfully');\r\n  }\r\n})();\r\n"],"names":["isWindow","window","isGlobal","global","$","jQuery","TablixJS","Table","require","default","e","console","warn","error","PLUGIN_NAME","DATA_KEY","fn","options","args","this","each","$element","instance","data","methodName","length","loadData","destroy","removeData","refreshTable","getData","getOriginalData","getSelectedData","getSelectedIds","selectRows","deselectRows","clearSelection","selectAllRows","filter","applyFilter","clearFilter","clearAllFilters","sort","toggleSort","clearSorting","setSearchTerm","clearSearch","nextPage","prevPage","firstPage","lastPage","goToPage","changePageSize","getPaginationInfo","setLanguage","getCurrentLanguage","getAvailableLanguages","setOptions","getOptions","on","off","trigger","handleMethodCall","existingInstance","normalizedOptions","normalized","columns","Object","assign","normalizeOptions","eventMap","afterLoad","beforeLoad","loadError","afterFilter","afterSort","afterPageChange","afterSearch","selectionChanged","selectAll","rowSelected","rowDeselected","keys","forEach","tablixEvent","jqueryEvent","setupJQueryEventForwarding","handleInitialization","version","defaults","getInstance","element","$el","isInitialized","destroyAll","log"],"mappings":"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"}